//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chat_proto.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Chatservice_ChatServiceRegisterOrLoginUserCall: ClientCallUnary {}

fileprivate final class Chatservice_ChatServiceRegisterOrLoginUserCallBase: ClientCallUnaryBase<Chatservice_LoginRequest, Chatservice_LoginResponse>, Chatservice_ChatServiceRegisterOrLoginUserCall {
  override class var method: String { return "/chatservice.ChatService/RegisterOrLoginUser" }
}

internal protocol Chatservice_ChatServiceRegisterOrJoinRoomCall: ClientCallUnary {}

fileprivate final class Chatservice_ChatServiceRegisterOrJoinRoomCallBase: ClientCallUnaryBase<Chatservice_RoomRequest, Chatservice_RoomResponse>, Chatservice_ChatServiceRegisterOrJoinRoomCall {
  override class var method: String { return "/chatservice.ChatService/RegisterOrJoinRoom" }
}

internal protocol Chatservice_ChatServiceCreateStreamCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Chatservice_ContentMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Chatservice_ContentMessage?>) -> Void) throws
}

internal extension Chatservice_ChatServiceCreateStreamCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Chatservice_ContentMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Chatservice_ChatServiceCreateStreamCallBase: ClientCallServerStreamingBase<Chatservice_StreamConnect, Chatservice_ContentMessage>, Chatservice_ChatServiceCreateStreamCall {
  override class var method: String { return "/chatservice.ChatService/CreateStream" }
}

internal protocol Chatservice_ChatServiceSendMessageCall: ClientCallUnary {}

fileprivate final class Chatservice_ChatServiceSendMessageCallBase: ClientCallUnaryBase<Chatservice_ContentMessage, Chatservice_Empty>, Chatservice_ChatServiceSendMessageCall {
  override class var method: String { return "/chatservice.ChatService/SendMessage" }
}


/// Instantiate Chatservice_ChatServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Chatservice_ChatServiceService: ServiceClient {
  /// Synchronous. Unary.
  func registerOrLoginUser(_ request: Chatservice_LoginRequest, metadata customMetadata: Metadata) throws -> Chatservice_LoginResponse
  /// Asynchronous. Unary.
  @discardableResult
  func registerOrLoginUser(_ request: Chatservice_LoginRequest, metadata customMetadata: Metadata, completion: @escaping (Chatservice_LoginResponse?, CallResult) -> Void) throws -> Chatservice_ChatServiceRegisterOrLoginUserCall

  /// Synchronous. Unary.
  func registerOrJoinRoom(_ request: Chatservice_RoomRequest, metadata customMetadata: Metadata) throws -> Chatservice_RoomResponse
  /// Asynchronous. Unary.
  @discardableResult
  func registerOrJoinRoom(_ request: Chatservice_RoomRequest, metadata customMetadata: Metadata, completion: @escaping (Chatservice_RoomResponse?, CallResult) -> Void) throws -> Chatservice_ChatServiceRegisterOrJoinRoomCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func createStream(_ request: Chatservice_StreamConnect, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chatservice_ChatServiceCreateStreamCall

  /// Synchronous. Unary.
  func sendMessage(_ request: Chatservice_ContentMessage, metadata customMetadata: Metadata) throws -> Chatservice_Empty
  /// Asynchronous. Unary.
  @discardableResult
  func sendMessage(_ request: Chatservice_ContentMessage, metadata customMetadata: Metadata, completion: @escaping (Chatservice_Empty?, CallResult) -> Void) throws -> Chatservice_ChatServiceSendMessageCall

}

internal extension Chatservice_ChatServiceService {
  /// Synchronous. Unary.
  func registerOrLoginUser(_ request: Chatservice_LoginRequest) throws -> Chatservice_LoginResponse {
    return try self.registerOrLoginUser(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func registerOrLoginUser(_ request: Chatservice_LoginRequest, completion: @escaping (Chatservice_LoginResponse?, CallResult) -> Void) throws -> Chatservice_ChatServiceRegisterOrLoginUserCall {
    return try self.registerOrLoginUser(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func registerOrJoinRoom(_ request: Chatservice_RoomRequest) throws -> Chatservice_RoomResponse {
    return try self.registerOrJoinRoom(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func registerOrJoinRoom(_ request: Chatservice_RoomRequest, completion: @escaping (Chatservice_RoomResponse?, CallResult) -> Void) throws -> Chatservice_ChatServiceRegisterOrJoinRoomCall {
    return try self.registerOrJoinRoom(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func createStream(_ request: Chatservice_StreamConnect, completion: ((CallResult) -> Void)?) throws -> Chatservice_ChatServiceCreateStreamCall {
    return try self.createStream(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func sendMessage(_ request: Chatservice_ContentMessage) throws -> Chatservice_Empty {
    return try self.sendMessage(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func sendMessage(_ request: Chatservice_ContentMessage, completion: @escaping (Chatservice_Empty?, CallResult) -> Void) throws -> Chatservice_ChatServiceSendMessageCall {
    return try self.sendMessage(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Chatservice_ChatServiceServiceClient: ServiceClientBase, Chatservice_ChatServiceService {
  /// Synchronous. Unary.
  internal func registerOrLoginUser(_ request: Chatservice_LoginRequest, metadata customMetadata: Metadata) throws -> Chatservice_LoginResponse {
    return try Chatservice_ChatServiceRegisterOrLoginUserCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func registerOrLoginUser(_ request: Chatservice_LoginRequest, metadata customMetadata: Metadata, completion: @escaping (Chatservice_LoginResponse?, CallResult) -> Void) throws -> Chatservice_ChatServiceRegisterOrLoginUserCall {
    return try Chatservice_ChatServiceRegisterOrLoginUserCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func registerOrJoinRoom(_ request: Chatservice_RoomRequest, metadata customMetadata: Metadata) throws -> Chatservice_RoomResponse {
    return try Chatservice_ChatServiceRegisterOrJoinRoomCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func registerOrJoinRoom(_ request: Chatservice_RoomRequest, metadata customMetadata: Metadata, completion: @escaping (Chatservice_RoomResponse?, CallResult) -> Void) throws -> Chatservice_ChatServiceRegisterOrJoinRoomCall {
    return try Chatservice_ChatServiceRegisterOrJoinRoomCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func createStream(_ request: Chatservice_StreamConnect, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chatservice_ChatServiceCreateStreamCall {
    return try Chatservice_ChatServiceCreateStreamCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func sendMessage(_ request: Chatservice_ContentMessage, metadata customMetadata: Metadata) throws -> Chatservice_Empty {
    return try Chatservice_ChatServiceSendMessageCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func sendMessage(_ request: Chatservice_ContentMessage, metadata customMetadata: Metadata, completion: @escaping (Chatservice_Empty?, CallResult) -> Void) throws -> Chatservice_ChatServiceSendMessageCall {
    return try Chatservice_ChatServiceSendMessageCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

